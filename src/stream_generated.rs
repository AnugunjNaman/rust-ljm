// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod stream {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ScanBatchOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScanBatch<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScanBatch<'a> {
  type Inner = ScanBatch<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> ScanBatch<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_CHANNEL_IDS: flatbuffers::VOffsetT = 6;
  pub const VT_VALUES: flatbuffers::VOffsetT = 8;
  pub const VT_SCANS_IN_BATCH: flatbuffers::VOffsetT = 10;
  pub const VT_CHANNELS_PER_SCAN: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScanBatch { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScanBatchArgs<'args>
  ) -> flatbuffers::WIPOffset<ScanBatch<'bldr>> {
    let mut builder = ScanBatchBuilder::new(_fbb);
    builder.add_channels_per_scan(args.channels_per_scan);
    builder.add_scans_in_batch(args.scans_in_batch);
    if let Some(x) = args.values { builder.add_values(x); }
    if let Some(x) = args.channel_ids { builder.add_channel_ids(x); }
    if let Some(x) = args.timestamp { builder.add_timestamp(x); }
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScanBatch::VT_TIMESTAMP, None)}
  }
  #[inline]
  pub fn channel_ids(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(ScanBatch::VT_CHANNEL_IDS, None)}
  }
  #[inline]
  pub fn values(&self) -> Option<flatbuffers::Vector<'a, f64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f64>>>(ScanBatch::VT_VALUES, None)}
  }
  #[inline]
  pub fn scans_in_batch(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ScanBatch::VT_SCANS_IN_BATCH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn channels_per_scan(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ScanBatch::VT_CHANNELS_PER_SCAN, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ScanBatch<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("channel_ids", Self::VT_CHANNEL_IDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f64>>>("values", Self::VT_VALUES, false)?
     .visit_field::<i32>("scans_in_batch", Self::VT_SCANS_IN_BATCH, false)?
     .visit_field::<i32>("channels_per_scan", Self::VT_CHANNELS_PER_SCAN, false)?
     .finish();
    Ok(())
  }
}
pub struct ScanBatchArgs<'a> {
    pub timestamp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub channel_ids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub values: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f64>>>,
    pub scans_in_batch: i32,
    pub channels_per_scan: i32,
}
impl<'a> Default for ScanBatchArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScanBatchArgs {
      timestamp: None,
      channel_ids: None,
      values: None,
      scans_in_batch: 0,
      channels_per_scan: 0,
    }
  }
}

pub struct ScanBatchBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScanBatchBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScanBatch::VT_TIMESTAMP, timestamp);
  }
  #[inline]
  pub fn add_channel_ids(&mut self, channel_ids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScanBatch::VT_CHANNEL_IDS, channel_ids);
  }
  #[inline]
  pub fn add_values(&mut self, values: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScanBatch::VT_VALUES, values);
  }
  #[inline]
  pub fn add_scans_in_batch(&mut self, scans_in_batch: i32) {
    self.fbb_.push_slot::<i32>(ScanBatch::VT_SCANS_IN_BATCH, scans_in_batch, 0);
  }
  #[inline]
  pub fn add_channels_per_scan(&mut self, channels_per_scan: i32) {
    self.fbb_.push_slot::<i32>(ScanBatch::VT_CHANNELS_PER_SCAN, channels_per_scan, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScanBatchBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScanBatchBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScanBatch<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScanBatch<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScanBatch");
      ds.field("timestamp", &self.timestamp());
      ds.field("channel_ids", &self.channel_ids());
      ds.field("values", &self.values());
      ds.field("scans_in_batch", &self.scans_in_batch());
      ds.field("channels_per_scan", &self.channels_per_scan());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ScanBatch`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_scan_batch_unchecked`.
pub fn root_as_scan_batch(buf: &[u8]) -> Result<ScanBatch, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ScanBatch>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ScanBatch` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_scan_batch_unchecked`.
pub fn size_prefixed_root_as_scan_batch(buf: &[u8]) -> Result<ScanBatch, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ScanBatch>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ScanBatch` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_scan_batch_unchecked`.
pub fn root_as_scan_batch_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ScanBatch<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ScanBatch<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ScanBatch` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_scan_batch_unchecked`.
pub fn size_prefixed_root_as_scan_batch_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ScanBatch<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ScanBatch<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ScanBatch and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ScanBatch`.
pub unsafe fn root_as_scan_batch_unchecked(buf: &[u8]) -> ScanBatch {
  unsafe { flatbuffers::root_unchecked::<ScanBatch>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ScanBatch and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ScanBatch`.
pub unsafe fn size_prefixed_root_as_scan_batch_unchecked(buf: &[u8]) -> ScanBatch {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<ScanBatch>(buf) }
}
#[inline]
pub fn finish_scan_batch_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ScanBatch<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_scan_batch_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ScanBatch<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod stream

